In the face of a multi -threaded problem, the first thing to do is to draw the state diagram of each thread. At the same time, the drawing sequence diagram is used to determine the order of interaction between these threads. After drawing the status diagram, start to decide which model is used to achieve the entire system. I chose a combination of monitor and wait(), notify(). The potential problem with the simulation system is that different threads need to access the mansion instance together to get their own state, so each thread accesses the mansion variables to obtain a lock to ensure mutual exclusivity, and the volatile keyword is used to ensure the consistency of the variables. More carefully, heroes into the mansion should be sure that the professor is not in the mansion, the professor should gather all the heroes in the mansion when the meeting, the heroes in the meeting to obtain, submit, release the task, while the heroes are leaving the conference room should adjourn, and wait for the professor to leave and go out to carry out the task.
First of all, the problem I encountered was the SuperHero thread and the Professor thread fell into a deadlock, but if you set a timeout for wait(), it can run normally. At this point I realized that my understanding of notify() and wait() was wrong, notify() and wait() should acquire and release the same lock, so I rewrote them to both acquire the lock of mansion, and the problem was solved.
The problem I ran into after that was that if the professor left the mansion and returned to it too quickly at the end of the session, it would cause the heroes who had just been assigned the task to be unable to exit the mansion, resulting in a deadlock. The reason for the deadlock is that the professor needs to wait for people to come together for a meeting, but the heroes who received the task in the last round have not yet come out of the mansion, resulting in a discrepancy between the number of people in the mansion and the number of people who can enter the secret room, the professor cannot have a meeting and the heroes cannot come out of the mansion. The solution was to subtract one for the number of heroes in the mansion whenever the hero wanted to exit the mansion, regardless of whether he waited or not.
I think my solution was successful because he was able to produce the output requested in the document and get the correct concurrent results, while correctly using the knowledge taught earlier.